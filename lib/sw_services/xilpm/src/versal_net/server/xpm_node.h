/******************************************************************************
* Copyright (c) 2018 - 2022 Xilinx, Inc.  All rights reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/

#ifndef XPM_NODE_H_
#define XPM_NODE_H_
#ifdef __cplusplus
extern "C" {
#endif

/* Node subclass types */
typedef enum {
	/* Power nodes */
	XPM_NODESUBCL_POWER_ISLAND=1,
	XPM_NODESUBCL_POWER_DOMAIN,
	XPM_NODESUBCL_POWER_RAIL,
	XPM_NODESUBCL_POWER_REGULATOR,
} XPm_PowerNodeSubclass;

/* Node class types */
typedef enum {
	XPM_NODECLASS_MIN,

	XPM_NODECLASS_POWER,
	XPM_NODECLASS_CLOCK,
	XPM_NODECLASS_RESET,
	XPM_NODECLASS_MEMIC,
	XPM_NODECLASS_STMIC,
	XPM_NODECLASS_DEVICE,
	XPM_NODECLASS_SUBSYSTEM,
	XPM_NODECLASS_ISOLATION,
	XPM_NODECLASS_PROTECTION,
	XPM_NODECLASS_EVENT,
	XPM_NODECLASS_MONITOR,

	XPM_NODECLASS_MAX
} XPm_NodeClass;

typedef enum {
	/* Device types */
	XPM_NODETYPE_DEV_CORE_PMC=1,
	XPM_NODETYPE_DEV_CORE_PSM,
	XPM_NODETYPE_DEV_CORE_APU,
	XPM_NODETYPE_DEV_CORE_RPU,
	XPM_NODETYPE_DEV_OCM,
	XPM_NODETYPE_DEV_TCM,

} XPm_DeviceNodeType;

typedef enum {
	/* Device types */
	XPM_NODESUBCL_DEV_CORE=1,
	XPM_NODESUBCL_DEV_PERIPH,
	XPM_NODESUBCL_DEV_MEM,
	XPM_NODESUBCL_DEV_SOC,
	XPM_NODESUBCL_DEV_MEM_CTRLR,
	XPM_NODESUBCL_DEV_PHY,
	XPM_NODESUBCL_DEV_PL,//used in xloader.c
	XPM_NODESUBCL_DEV_AIE,
} XPm_DeviceNodeSubclass;
typedef enum {
	/* Device nodes */
	XPM_NODEIDX_DEV_MIN,

	/* Processor devices */
	XPM_NODEIDX_DEV_PMC_PROC,
	XPM_NODEIDX_DEV_PSM_PROC,
	XPM_NODEIDX_DEV_CLUSTER_0_ACPU_0,
	XPM_NODEIDX_DEV_CLUSTER_0_ACPU_1,
	XPM_NODEIDX_DEV_CLUSTER_0_ACPU_2,
	XPM_NODEIDX_DEV_CLUSTER_0_ACPU_3,
	XPM_NODEIDX_DEV_CLUSTER_1_ACPU_0,
	XPM_NODEIDX_DEV_CLUSTER_1_ACPU_1,
	XPM_NODEIDX_DEV_CLUSTER_1_ACPU_2,
	XPM_NODEIDX_DEV_CLUSTER_1_ACPU_3,
	XPM_NODEIDX_DEV_CLUSTER_2_ACPU_0,
	XPM_NODEIDX_DEV_CLUSTER_2_ACPU_1,
	XPM_NODEIDX_DEV_CLUSTER_2_ACPU_2,
	XPM_NODEIDX_DEV_CLUSTER_2_ACPU_3,
	XPM_NODEIDX_DEV_CLUSTER_3_ACPU_0,
	XPM_NODEIDX_DEV_CLUSTER_3_ACPU_1,
	XPM_NODEIDX_DEV_CLUSTER_3_ACPU_2,
	XPM_NODEIDX_DEV_CLUSTER_3_ACPU_3,
	XPM_NODEIDX_DEV_RPU0_0_CLUSTER_0,
	XPM_NODEIDX_DEV_RPU0_1_CLUSTER_0,
	XPM_NODEIDX_DEV_RPU0_0_CLUSTER_1,
	XPM_NODEIDX_DEV_RPU0_1_CLUSTER_1,

	XPM_NODEIDX_DEV_MAX,
} XPm_DeviceNodeIndex;

typedef enum {
	/* Power nodes */
	XPM_NODEIDX_POWER_MIN,

	/* Power domains */
	XPM_NODEIDX_POWER_PMC,
	XPM_NODEIDX_POWER_LPD,
	XPM_NODEIDX_POWER_MAX,
} XPm_PowerNodeIndex;


/**
 * Isolation IDs
 */
typedef enum {
	XPM_NODEIDX_ISO_FPD_PL_TEST,
	XPM_NODEIDX_ISO_FPD_PL,
	XPM_NODEIDX_ISO_FPD_SOC,
	XPM_NODEIDX_ISO_LPD_CPM_DFX,
	XPM_NODEIDX_ISO_LPD_CPM,
	XPM_NODEIDX_ISO_LPD_PL_TEST,
	XPM_NODEIDX_ISO_LPD_PL,
	XPM_NODEIDX_ISO_LPD_SOC,
	XPM_NODEIDX_ISO_PMC_LPD_DFX,
	XPM_NODEIDX_ISO_PMC_LPD,
	XPM_NODEIDX_ISO_PMC_PL_CFRAME,
	XPM_NODEIDX_ISO_PMC_PL_TEST,
	XPM_NODEIDX_ISO_PMC_PL,
	XPM_NODEIDX_ISO_PMC_SOC_NPI,
	XPM_NODEIDX_ISO_PMC_SOC,
	XPM_NODEIDX_ISO_PL_SOC,
	XPM_NODEIDX_ISO_VCCAUX_SOC,
	XPM_NODEIDX_ISO_VCCRAM_SOC,
	XPM_NODEIDX_ISO_VCCAUX_VCCRAM,
	XPM_NODEIDX_ISO_PL_CPM_PCIEA0_ATTR,
	XPM_NODEIDX_ISO_PL_CPM_PCIEA1_ATTR,
	XPM_NODEIDX_ISO_PL_CPM_RST_CPI0,
	XPM_NODEIDX_ISO_PL_CPM_RST_CPI1,
	XPM_NODEIDX_ISO_GEM_TSU_CLK,
	XPM_NODEIDX_ISO_GEM0_TXRX_CLK,
	XPM_NODEIDX_ISO_GEM1_TXRX_CLK,
	XPM_NODEIDX_ISO_CPM5_PL,
	XPM_NODEIDX_ISO_CPM5_PL_AXIMM,
	XPM_NODEIDX_ISO_CPM5_PL_CHI0,
	XPM_NODEIDX_ISO_CPM5_PL_CHI1,
	XPM_NODEIDX_ISO_CPM5_PL_TST,
	XPM_NODEIDX_ISO_CPM5_PL_PCIEA0_MPIO,
	XPM_NODEIDX_ISO_CPM5_PL_PCIEA1_MPIO,
	XPM_NODEIDX_ISO_CPM5_RAM,
	/* Remove below ones later if they don't need special handling and
	same as LPD_CPM and LPD_CPM_DFX */
	XPM_NODEIDX_ISO_LPD_CPM5,
	XPM_NODEIDX_ISO_LPD_CPM5_DFX,
	XPM_NODEIDX_ISO_XRAM_PL_AXI0,
	XPM_NODEIDX_ISO_XRAM_PL_AXI1,
	XPM_NODEIDX_ISO_XRAM_PL_AXI2,
	XPM_NODEIDX_ISO_XRAM_PL_AXILITE,
	XPM_NODEIDX_ISO_XRAM_PL_FABRIC,
	XPM_NODEIDX_ISO_CPM5_PL_DFX,

	XPM_NODEIDX_ISO_MAX,
} XPm_IsolationId;

#define NODE_CLASS_SHIFT	26U
#define NODE_SUBCLASS_SHIFT	20U
#define NODE_TYPE_SHIFT		14U
#define NODE_INDEX_SHIFT	0U
#define NODE_CLASS_MASK_BITS    0x3FU
#define NODE_SUBCLASS_MASK_BITS 0x3FU
#define NODE_TYPE_MASK_BITS     0x3FU
#define NODE_INDEX_MASK_BITS    0x3FFFU
#define NODE_CLASS_MASK         ((u32)NODE_CLASS_MASK_BITS << NODE_CLASS_SHIFT)
#define NODE_SUBCLASS_MASK      ((u32)NODE_SUBCLASS_MASK_BITS << NODE_SUBCLASS_SHIFT)
#define NODE_TYPE_MASK          ((u32)NODE_TYPE_MASK_BITS << NODE_TYPE_SHIFT)
#define NODE_INDEX_MASK         ((u32)NODE_INDEX_MASK_BITS << NODE_INDEX_SHIFT)

#define NODECLASS(ID)		(((ID) & NODE_CLASS_MASK) >> NODE_CLASS_SHIFT)
#define NODESUBCLASS(ID)	(((ID) & NODE_SUBCLASS_MASK) >> NODE_SUBCLASS_SHIFT)
#define NODETYPE(ID)		(((ID) & NODE_TYPE_MASK) >> NODE_TYPE_SHIFT)
#define NODEINDEX(ID)		(((ID) & NODE_INDEX_MASK) >> NODE_INDEX_SHIFT)
#ifdef __cplusplus
}
#endif

/** @} */
#endif /* XPM_NODE_H_ */
